{"version":3,"sources":["../../../../src/app/typescripts/free/charts/chart.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAIL,YAAY,EACZ,UAAU,EACV,KAAK,EACL,MAAM,EAGN,SAAS,EACV,MAAM,eAAA,CAAgB;AAQvB;IAoCE,4BAAmB,OAAmB;QAlB9B,WAAM,GAAe,EAAE,CAAC;QACxB,YAAO,GAAQ;YACrB,MAAM,EAAE,EAAC,OAAO,EAAE,KAAK,EAAC;SACzB,CAAC;QAGM,WAAM,GAAG,KAAK,CAAC;QAEf,eAAU,GAAsB,IAAI,YAAY,EAAE,CAAC;QACnD,eAAU,GAAsB,IAAI,YAAY,EAAE,CAAC;QAKnD,aAAQ,GAAG,KAAK,CAAC;QAKvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,qCAAQ,GAAf;QACE,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;IACH,CAAC;IAEM,wCAAW,GAAlB,UAAmB,OAAsB;QACvC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAClB,mDAAmD;YACnD,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBACzE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;oBACpB,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,CAAC;gBACrD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,CAAC;gBACzD,CAAC;gBAED,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;YACtB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,8BAA8B;gBAC9B,IAAI,CAAC,OAAO,EAAE,CAAC;YACjB,CAAC;QACH,CAAC;IACH,CAAC;IAEM,wCAAW,GAAlB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC;QACtB,CAAC;IACH,CAAC;IAEM,4CAAe,GAAtB,UAAuB,GAAQ,CAAA,kCAAkC;QAAjE,iBAiCC;QAhCC,IAAM,QAAQ,GAAQ,IAAI,CAAC,WAAW,EAAE,CAAC;QAEzC,IAAM,OAAO,GAAQ,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACrD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK,CAAC,CAAC,CAAC;YAC1B,OAAO,CAAC,MAAM,GAAG,EAAC,OAAO,EAAE,KAAK,EAAC,CAAC;QACpC,CAAC;QACD,sCAAsC;QACtC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;QACpC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3B,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,UAAC,KAAU,EAAE,MAAkB;gBACrD,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC5B,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAC,KAAK,OAAA,EAAE,MAAM,QAAA,EAAC,CAAC,CAAC;gBACxC,CAAC;YACH,CAAC,CAAC;QACJ,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YACrB,OAAO,CAAC,OAAO,GAAG,UAAC,KAAU,EAAE,MAAkB;gBAC/C,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAC,KAAK,OAAA,EAAE,MAAM,QAAA,EAAC,CAAC,CAAC;YACxC,CAAC,CAAC;QACJ,CAAC;QAED,IAAM,IAAI,GAAG;YACX,IAAI,EAAE,IAAI,CAAC,SAAS;YACpB,IAAI,EAAE;gBACJ,MAAM,EAAE,IAAI,CAAC,MAAM;gBACnB,QAAQ,EAAE,QAAQ;aACnB;YACD,OAAO,EAAE,OAAO;SACjB,CAAC;QAEF,MAAM,CAAC,IAAI,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAC9B,CAAC;IAEO,4CAAe,GAAvB,UAAwB,aAA+B;QACrD,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACzC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAY,EAAE,CAAS;gBACvD,OAAO,CAAC,IAAI,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAErC,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC3B,OAAO,CAAC,KAAK,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;gBACzC,CAAC;YACH,CAAC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,aAAa,CAAC;QACnD,CAAC;IACH,CAAC;IAEO,wCAAW,GAAnB;QAAA,iBAiCD;QAhCG,IAAI,QAAQ,GAAQ,KAAK,CAAC,CAAC;QAC3B,2DAA2D;QAC3D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAC/E,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAChC,QAAQ,GAAI,IAAI,CAAC,IAAwB,CAAC,GAAG,CAAC,UAAC,IAAc,EAAE,KAAa;oBAC1E,MAAM,CAAC,EAAC,IAAI,MAAA,EAAE,KAAK,EAAE,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,WAAS,KAAO,EAAC,CAAC;gBAC/D,CAAC,CAAC,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,QAAQ,GAAG,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,EAAC,CAAC,CAAC;YACnD,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM;YACvC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAChC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC;iBACvC,GAAG,CAAC,UAAC,GAAW,EAAE,KAAa;gBAC9B,IAAM,MAAM,GAAQ,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;gBAC3C,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,IAAI,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;oBACtC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC5C,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,KAAI,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9E,CAAC;gBACD,MAAM,CAAC,MAAM,CAAC;YAChB,CAAC,CAAC,CAAC;QACL,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,IAAI,KAAK,CAAC,8FACuC,IAAI,CAAC,SAAW,CAAC,CAAC;QAC3E,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC;IAClB,CAAC;IAEO,oCAAO,GAAf;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAA,wBAAwB,CAAC,CAAC;IACtE,CAAC;IAmBD,yBAAC;AAAD,CApLA,AAoLC;;AAnLe,gCAAa,GAAoB;IAC/C,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC;IACd,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;IACd,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;IACd,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACf,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;IACd,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACf,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACf,CAAC,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC;IACb,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;IACd,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;IACd,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IACf,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;CACX,CAAC;AAoJG,6BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAC,QAAQ,EAAE,kBAAkB,EAAE,QAAQ,EAAE,gBAAgB,EAAC,EAAG,EAAE;CACxF,CAAC;AACF,kBAAkB;AACX,iCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,UAAU,GAAG;CACnB,EAF6F,CAE7F,CAAC;AACK,iCAAc,GAA2C;IAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC1B,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,WAAW,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC/B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC5B,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;IACjC,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAChC,CAAC;AAGF,cAlBc,MAAqB,EAAE,KAAO;IAmB1C,MAAM,CAlBC,OAAA,GAAU,MAAA,CAAO,MAAC,CAAM,KAAC,CAAK,CAAC,IAAC,CAAI,GAAC,CAAG,GAAG,GAAA,CAAI;AAmBxD,CAAC;AAED,sBAlBsB,GAAK,EAAQ,GAAK;IAmBtC,MAAM,CAlBC,IAAA,CAAK,KAAC,CAAK,IAAC,CAAI,MAAC,EAAM,GAAI,CAAA,GAAE,GAAK,GAAA,GAAM,CAAA,CAAE,CAAC,GAAG,GAAA,CAAI;AAmB3D,CAAC;AAED,yBAlByB,MAAqB;IAmB5C,MAAM,CAlBC;QAmBL,eAAe,EAlBE,IAAA,CAAK,MAAC,EAAO,GAAA,CAAI;QAmBlC,WAAW,EAlBE,IAAA,CAAK,MAAC,EAAO,CAAA,CAAE;QAmB5B,oBAAoB,EAlBE,IAAA,CAAK,MAAC,EAAO,CAAA,CAAE;QAmBrC,gBAAgB,EAlBE,MAAA;QAmBlB,yBAAyB,EAlBE,MAAA;QAmB3B,qBAAqB,EAlBE,IAAA,CAAK,MAAC,EAAO,GAAA,CAAI;KAmBzC,CAlBC;AAmBJ,CAAC;AAED,wBAlBwB,MAAqB;IAmB3C,MAAM,CAlBC;QAmBL,eAAe,EAlBE,IAAA,CAAK,MAAC,EAAO,GAAA,CAAI;QAmBlC,WAAW,EAlBE,IAAA,CAAK,MAAC,EAAO,CAAA,CAAE;QAmB5B,oBAAoB,EAlBE,IAAA,CAAK,MAAC,EAAO,GAAA,CAAI;QAmBvC,gBAAgB,EAlBE,IAAA,CAAK,MAAC,EAAO,CAAA,CAAE;KAmBlC,CAlBC;AAmBJ,CAAC;AAED,yBAlByB,MAAuB;IAmB9C,MAAM,CAlBC;QAmBL,eAAe,EAlBE,MAAA,CAAO,GAAC,CAAG,UAAC,KAAc,IAAM,OAAA,IAAA,CAAK,KAAC,EAAM,GAAA,CAAI,EAAhB,CAAgB,CAAC;QAmBlE,WAAW,EAlBE,MAAA,CAAO,GAAC,CAAG,cAAM,OAAA,MAAA,EAAA,CAAA,CAAO;QAmBrC,oBAAoB,EAlBE,MAAA,CAAO,GAAC,CAAG,UAAC,KAAc,IAAM,OAAA,IAAA,CAAK,KAAC,EAAM,CAAA,CAAE,EAAd,CAAc,CAAC;QAmBrE,gBAAgB,EAlBE,MAAA,CAAO,GAAC,CAAG,cAAM,OAAA,MAAA,EAAA,CAAA,CAAO;QAmB1C,yBAAyB,EAlBE,MAAA,CAAO,GAAC,CAAG,UAAC,KAAc,IAAM,OAAA,IAAA,CAAK,KAAC,EAAM,CAAA,CAAE,EAAd,CAAc,CAAC;QAmB1E,qBAAqB,EAlBE,MAAA,CAAO,GAAC,CAAG,UAAC,KAAc,IAAM,OAAA,IAAA,CAAK,KAAC,EAAM,CAAA,CAAE,EAAd,CAAc,CAAC;KAmBvE,CAlBC;AAmBJ,CAAC;AAED,+BAlB+B,MAAuB;IAmBpD,MAAM,CAlBC;QAmBL,eAAe,EAlBE,MAAA,CAAO,GAAC,CAAG,UAAC,KAAc,IAAM,OAAA,IAAA,CAAK,KAAC,EAAM,GAAA,CAAI,EAAhB,CAAgB,CAAC;QAmBlE,WAAW,EAlBE,MAAA,CAAO,GAAC,CAAG,UAAC,KAAc,IAAM,OAAA,IAAA,CAAK,KAAC,EAAM,CAAA,CAAE,EAAd,CAAc,CAAC;QAmB5D,oBAAoB,EAlBE,MAAA,CAAO,GAAC,CAAG,UAAC,KAAc,IAAM,OAAA,IAAA,CAAK,KAAC,EAAM,GAAA,CAAI,EAAhB,CAAgB,CAAC;QAmBvE,gBAAgB,EAlBE,MAAA,CAAO,GAAC,CAAG,UAAC,KAAc,IAAM,OAAA,IAAA,CAAK,KAAC,EAAM,CAAA,CAAE,EAAd,CAAc,CAAC;KAmBlE,CAlBC;AAmBJ,CAAC;AAED;IACE,MAAM,CAlBC,CAAA,YAAE,CAAY,CAAC,EAAE,GAAA,CAAI,EAAE,YAAA,CAAa,CAAC,EAAE,GAAA,CAAI,EAAE,YAAA,CAAa,CAAC,EAAE,GAAA,CAAI,CAAC,CAAC;AAmB5E,CAAC;AAED;;;;GAIG;AACF,uBAlBuB,KAAO;IAmB5B,MAAM,CAlBC,kBAAA,CAAmB,aAAC,CAAa,KAAC,CAAK,IAAI,cAAA,EAAe,CAAE;AAmBrE,CAAC;AAEF;;;;GAIG;AACF,wBAlBwB,KAAO;IAmB7B,IAlBM,SAAA,GAA6B,IAAI,KAAA,CAAM,KAAC,CAAK,CAAC;IAmBpD,GAAG,CAAC,CAAC,IAlBI,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,KAAA,EAAO,CAAA,EAAE,EAAG,CAAA;QAmB9B,SAAS,CAlBC,CAAC,CAAC,GAAG,kBAAA,CAAmB,aAAC,CAAa,CAAC,CAAC,IAAI,cAAA,EAAe,CAAE;IAmBzE,CAAC;IACD,MAAM,CAlBC,SAAA,CAAU;AAmBnB,CAAC;AAEF;;;;;;GAMG;AACF,mBAlBmB,SAAW,EAAQ,KAAO,EAAQ,KAAO;IAmB1D,EAAE,CAAC,CAAC,SAlBC,KAAa,KAAA,IAAS,SAAA,KAAc,UAAA,CAAW,CAAC,CAAA;QAmBnD,MAAM,CAlBC,eAAA,CAAgB,cAAC,CAAc,KAAC,CAAK,CAAC,CAAC;IAmBhD,CAAC;IAED,EAAE,CAAC,CAAC,SAlBC,KAAa,WAAA,CAAY,CAAC,CAAA;QAmB7B,MAAM,CAlBC,qBAAA,CAAsB,cAAC,CAAc,KAAC,CAAK,CAAC,CAAC;IAmBtD,CAAC;IAED,EAAE,CAAC,CAAC,SAlBC,KAAa,MAAA,IAAU,SAAA,KAAc,OAAA,CAAQ,CAAC,CAAA;QAmBjD,MAAM,CAlBC,eAAA,CAAgB,aAAC,CAAa,KAAC,CAAK,CAAC,CAAC;IAmB/C,CAAC;IAED,EAAE,CAAC,CAAC,SAlBC,KAAa,KAAA,IAAS,SAAA,KAAc,eAAA,CAAgB,CAAC,CAAA;QAmBxD,MAAM,CAlBC,cAAA,CAAe,aAAC,CAAa,KAAC,CAAK,CAAC,CAAC;IAmB9C,CAAC;IACD,MAAM,CAlBC,aAAA,CAAc,KAAC,CAAK,CAAC;AAmB9B,CAAC","file":"chart.directive.js","sourceRoot":"","sourcesContent":["import {\r\n  OnDestroy,\r\n  OnInit,\r\n  OnChanges,\r\n  EventEmitter,\r\n  ElementRef,\r\n  Input,\r\n  Output,\r\n  NgModule,\r\n  SimpleChanges,\r\n  Directive\r\n} from '@angular/core';\r\n\r\nimport { Color } from './color.service';\r\nimport { Colors } from './colors.service';\r\n\r\ndeclare var Chart: any;\r\n\r\n\r\nexport class BaseChartDirective implements OnDestroy, OnChanges, OnInit, Colors {\r\n  public static defaultColors: Array<number[]> = [\r\n  [255, 99, 132],\r\n  [54, 162, 235],\r\n  [255, 206, 86],\r\n  [231, 233, 237],\r\n  [75, 192, 192],\r\n  [151, 187, 205],\r\n  [220, 220, 220],\r\n  [247, 70, 74],\r\n  [70, 191, 189],\r\n  [253, 180, 92],\r\n  [148, 159, 177],\r\n  [77, 83, 96]\r\n  ];\r\n\r\n   public data: number[] | any[];\r\n   public datasets: any[];\r\n   public labels: Array<any> = [];\r\n   public options: any = {\r\n    legend: {display: false}\r\n  };\r\n   public chartType: string;\r\n   public colors: Array<any>;\r\n   public legend = false;\r\n\r\n   public chartClick: EventEmitter<any> = new EventEmitter();\r\n   public chartHover: EventEmitter<any> = new EventEmitter();\r\n\r\n  public ctx: any;\r\n  public chart: any;\r\n  private cvs: any;\r\n  private initFlag = false;\r\n\r\n  private element: ElementRef;\r\n\r\n  public constructor(element: ElementRef) {\r\n    this.element = element;\r\n  }\r\n\r\n  public ngOnInit(): any {\r\n    this.ctx = this.element.nativeElement.getContext('2d');\r\n    this.cvs = this.element.nativeElement;\r\n    this.initFlag = true;\r\n    if (this.data || this.datasets) {\r\n      this.refresh();\r\n    }\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    if (this.initFlag) {\r\n      // Check if the changes are in the data or datasets\r\n      if (changes.hasOwnProperty('data') || changes.hasOwnProperty('datasets')) {\r\n        if (changes['data']) {\r\n          this.updateChartData(changes['data'].currentValue);\r\n        } else {\r\n          this.updateChartData(changes['datasets'].currentValue);\r\n        }\r\n\r\n        this.chart.update();\r\n      } else {\r\n        // otherwise rebuild the chart\r\n        this.refresh();\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnDestroy(): any {\r\n    if (this.chart) {\r\n      this.chart.destroy();\r\n      this.chart = void 0;\r\n    }\r\n  }\r\n\r\n  public getChartBuilder(ctx: any/*, data:Array<any>, options:any*/): any {\r\n    const datasets: any = this.getDatasets();\r\n\r\n    const options: any = Object.assign({}, this.options);\r\n    if (this.legend === false) {\r\n      options.legend = {display: false};\r\n    }\r\n    // hock for onHover and onClick events\r\n    options.hover = options.hover || {};\r\n    if (!options.hover.onHover) {\r\n      options.hover.onHover = (event: any, active: Array<any>) => {\r\n        if (active && active.length) {\r\n          this.chartHover.emit({event, active});\r\n        }\r\n      };\r\n    }\r\n\r\n    if (!options.onClick) {\r\n      options.onClick = (event: any, active: Array<any>) => {\r\n        this.chartClick.emit({event, active});\r\n      };\r\n    }\r\n\r\n    const opts = {\r\n      type: this.chartType,\r\n      data: {\r\n        labels: this.labels,\r\n        datasets: datasets\r\n      },\r\n      options: options\r\n    };\r\n\r\n    return new Chart(ctx, opts);\r\n  }\r\n\r\n  private updateChartData(newDataValues: number[] | any[]): void {\r\n    if (Array.isArray(newDataValues[0].data)) {\r\n      this.chart.data.datasets.forEach((dataset: any, i: number) => {\r\n        dataset.data = newDataValues[i].data;\r\n\r\n        if (newDataValues[i].label) {\r\n          dataset.label = newDataValues[i].label;\r\n        }\r\n      });\r\n    } else {\r\n      this.chart.data.datasets[0].data = newDataValues;\r\n    }\r\n  }\r\n\r\n  private getDatasets(): any {\r\n    let datasets: any = void 0;\r\n    // in case if datasets is not provided, but data is present\r\n    if (!this.datasets || !this.datasets.length && (this.data && this.data.length)) {\r\n      if (Array.isArray(this.data[0])) {\r\n        datasets = (this.data as Array<number[]>).map((data: number[], index: number) => {\r\n          return {data, label: this.labels[index] || `Label ${index}`};\r\n        });\r\n      } else {\r\n        datasets = [{data: this.data, label: `Label 0`}];\r\n      }\r\n    }\r\n\r\n    if (this.datasets && this.datasets.length ||\r\n      (datasets && datasets.length)) {\r\n      datasets = (this.datasets || datasets)\r\n    .map((elm: number, index: number) => {\r\n      const newElm: any = Object.assign({}, elm);\r\n      if (this.colors && this.colors.length) {\r\n        Object.assign(newElm, this.colors[index]);\r\n      } else {\r\n        Object.assign(newElm, getColors(this.chartType, index, newElm.data.length));\r\n      }\r\n      return newElm;\r\n    });\r\n  }\r\n\r\n  if (!datasets) {\r\n    throw new Error(`ng-charts configuration error,\r\n      data or datasets field are required to render char ${this.chartType}`);\r\n  }\r\n\r\n  return datasets;\r\n}\r\n\r\nprivate refresh(): any {\r\n  this.ngOnDestroy();\r\n  this.chart = this.getChartBuilder(this.ctx/*, data, this.options*/);\r\n}\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: 'canvas[mdbChart]', exportAs: 'mdb-base-chart'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'data': [{ type: Input },],\n'datasets': [{ type: Input },],\n'labels': [{ type: Input },],\n'options': [{ type: Input },],\n'chartType': [{ type: Input },],\n'colors': [{ type: Input },],\n'legend': [{ type: Input },],\n'chartClick': [{ type: Output },],\n'chartHover': [{ type: Output },],\n};\n}\r\n\r\nfunction rgba(colour: Array<number>, alpha: number): string {\r\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\r\n}\r\n\r\nfunction getRandomInt(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nfunction formatLineColor(colors: Array<number>): Color {\r\n  return {\r\n    backgroundColor: rgba(colors, 0.4),\r\n    borderColor: rgba(colors, 1),\r\n    pointBackgroundColor: rgba(colors, 1),\r\n    pointBorderColor: '#fff',\r\n    pointHoverBackgroundColor: '#fff',\r\n    pointHoverBorderColor: rgba(colors, 0.8)\r\n  };\r\n}\r\n\r\nfunction formatBarColor(colors: Array<number>): Color {\r\n  return {\r\n    backgroundColor: rgba(colors, 0.6),\r\n    borderColor: rgba(colors, 1),\r\n    hoverBackgroundColor: rgba(colors, 0.8),\r\n    hoverBorderColor: rgba(colors, 1)\r\n  };\r\n}\r\n\r\nfunction formatPieColors(colors: Array<number[]>): any {\r\n  return {\r\n    backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\r\n    borderColor: colors.map(() => '#fff'),\r\n    pointBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    pointBorderColor: colors.map(() => '#fff'),\r\n    pointHoverBackgroundColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    pointHoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\r\n  };\r\n}\r\n\r\nfunction formatPolarAreaColors(colors: Array<number[]>): Color {\r\n  return {\r\n    backgroundColor: colors.map((color: number[]) => rgba(color, 0.6)),\r\n    borderColor: colors.map((color: number[]) => rgba(color, 1)),\r\n    hoverBackgroundColor: colors.map((color: number[]) => rgba(color, 0.8)),\r\n    hoverBorderColor: colors.map((color: number[]) => rgba(color, 1))\r\n  };\r\n}\r\n\r\nfunction getRandomColor(): number[] {\r\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\r\n}\r\n\r\n/**\r\n * Generate colors for line|bar charts\r\n * @param index\r\n * @returns {number[]|Color}\r\n */\r\n function generateColor(index: number): number[] {\r\n   return BaseChartDirective.defaultColors[index] || getRandomColor();\r\n }\r\n\r\n/**\r\n * Generate colors for pie|doughnut charts\r\n * @param count\r\n * @returns {Colors}\r\n */\r\n function generateColors(count: number): Array<number[]> {\r\n   const colorsArr: Array<number[]> = new Array(count);\r\n   for (let i = 0; i < count; i++) {\r\n     colorsArr[i] = BaseChartDirective.defaultColors[i] || getRandomColor();\r\n   }\r\n   return colorsArr;\r\n }\r\n\r\n/**\r\n * Generate colors by chart type\r\n * @param chartType\r\n * @param index\r\n * @param count\r\n * @returns {Color}\r\n */\r\n function getColors(chartType: string, index: number, count: number): any {\r\n   if (chartType === 'pie' || chartType === 'doughnut') {\r\n     return formatPieColors(generateColors(count));\r\n   }\r\n\r\n   if (chartType === 'polarArea') {\r\n     return formatPolarAreaColors(generateColors(count));\r\n   }\r\n\r\n   if (chartType === 'line' || chartType === 'radar') {\r\n     return formatLineColor(generateColor(index));\r\n   }\r\n\r\n   if (chartType === 'bar' || chartType === 'horizontalBar') {\r\n     return formatBarColor(generateColor(index));\r\n   }\r\n   return generateColor(index);\r\n }\r\n\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}