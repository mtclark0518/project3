{"version":3,"sources":["../../../../../src/app/typescripts/free/utils/positioning/positioning.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAA,EAAY,UAAA,EAAW,MAAO,eAAA,CAAgB;AACvD,OAAO,EAAE,gBAAA,EAAiB,MAAO,kBAAA,CAAmB;AAmCjD;IAAA;IA4BH,CAAC;IA3BW,qCAAQ,GAAf,UAAgB,OAA2B;QAClC,IAAA,yBAAO,EAAE,uBAAM,EAAE,+BAAU,EAAE,mCAAY,CAAY;QAC5D,gBAAgB,CACd,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,EAC5B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAC7B,UAAU,EACV,YAAY,CAAC,CAAC;IAClB,CAAC;IAEO,4CAAe,GAAvB,UAAwB,OAA0C;QAChE,kCAAkC;QAClC,EAAE,CAAC,CAAC,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC;YAChC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAgB,CAAC;QACxD,CAAC;QAED,EAAE,CAAC,CAAC,OAAO,YAAY,UAAU,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC,OAAO,CAAC,aAAa,CAAC;QAC/B,CAAC;QAED,MAAM,CAAC,OAAsB,CAAC;IAChC,CAAC;IAON,yBAAC;AAAD,CA5BG,AA4BF;;AANS,6BAAU,GAA0B;IAC9C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,iCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"positioning.service.js","sourceRoot":"","sourcesContent":["import { Injectable, ElementRef } from '@angular/core';\r\nimport { positionElements } from './ng-positioning';\r\n\r\nexport interface PositioningOptions {\r\n  /** The DOM element, ElementRef, or a selector string of an element which will be moved */\r\n  element?: HTMLElement | ElementRef | string;\r\n\r\n  /** The DOM element, ElementRef, or a selector string of an element which the element will be attached to  */\r\n  target?: HTMLElement | ElementRef | string;\r\n\r\n    /**\r\n     * A string of the form 'vert-attachment horiz-attachment' or 'placement'\r\n     * - placement can be \"top\", \"bottom\", \"left\", \"right\"\r\n     * not yet supported:\r\n     * - vert-attachment can be any of 'top', 'middle', 'bottom'\r\n     * - horiz-attachment can be any of 'left', 'center', 'right'\r\n     */\r\n     attachment?: string;\r\n\r\n    /** A string similar to `attachment`. The one difference is that, if it's not provided,\r\n    `targetAttachment` will assume the mirror image of `attachment`. */\r\n    targetAttachment?: string;\r\n\r\n    /** A string of the form 'vert-offset horiz-offset'\r\n     * - vert-offset and horiz-offset can be of the form \"20px\" or \"55%\"\r\n     */\r\n     offset?: string;\r\n\r\n     /** A string similar to `offset`, but referring to the offset of the target */\r\n     targetOffset?: string;\r\n\r\n     /** If true component will be attached to body */\r\n     appendToBody?: boolean;\r\n   }\r\n\r\n   \r\n   export class PositioningService {\r\n     public position(options: PositioningOptions): void {\r\n       const {element, target, attachment, appendToBody} = options;\r\n       positionElements(\r\n         this._getHtmlElement(target),\r\n         this._getHtmlElement(element),\r\n         attachment,\r\n         appendToBody);\r\n     }\r\n\r\n     private _getHtmlElement(element: HTMLElement | ElementRef | string): HTMLElement {\r\n       // it means that we got a selector\r\n       if (typeof element === 'string') {\r\n         return document.querySelector(element) as HTMLElement;\r\n       }\r\n\r\n       if (element instanceof ElementRef) {\r\n         return element.nativeElement;\r\n       }\r\n\r\n       return element as HTMLElement;\r\n     }\r\n   static decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}