{"version":3,"sources":["../../../../src/app/typescripts/free/inputs/active.class.ts"],"names":[],"mappings":"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","file":"active.class.js","sourceRoot":"","sourcesContent":["import {Directive, ElementRef, Output, Input, HostListener, Renderer, AfterViewInit} from '@angular/core';\r\n\r\n\r\n\r\nexport class ActiveDirective implements AfterViewInit {\r\n\r\n   public mdbActive: ActiveDirective;\r\n  public el: ElementRef = null;\r\n  public elLabel: ElementRef = null;\r\n  public elIcon: Element = null;\r\n\r\n  constructor(el: ElementRef, public renderer: Renderer) {\r\n    this.el = el;\r\n  }\r\n\r\n   onClick() {\r\n    this.initComponent();\r\n  }\r\n\r\n   onBlur() {\r\n    this.checkValue();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.initComponent();\r\n    this.checkValue();\r\n    setTimeout(() => {\r\n      this.checkValue();\r\n    }, 0);\r\n  }\r\n\r\n  private initComponent(): void {\r\n    let inputId;\r\n    let inputP;\r\n\r\n    try {\r\n      inputId = this.el.nativeElement.id;\r\n    } catch (err) {}\r\n\r\n    try {\r\n      inputP = this.el.nativeElement.parentNode;\r\n    } catch (err) {}\r\n\r\n\r\n    this.elLabel = inputP.querySelector('label[for=\"' + inputId + '\"]') || inputP.querySelector('label');\r\n    if (this.elLabel != null) {\r\n      this.renderer.setElementClass(this.elLabel, 'active', true);\r\n    }\r\n\r\n    this.elIcon = inputP.querySelector('i') || false;\r\n\r\n    if (this.elIcon) {\r\n      this.renderer.setElementClass(this.elIcon, 'active', true);\r\n    }\r\n  }\r\n\r\n  private checkValue(): void {\r\n    let value = '';\r\n    if (this.elLabel != null) {\r\n      value = this.el.nativeElement.value || '';\r\n      if (value === '') {\r\n        this.renderer.setElementClass(this.elLabel, 'active', false);\r\n        if (this.elIcon) {\r\n          this.renderer.setElementClass(this.elIcon, 'active', false);\r\n        }\r\n      } else {\r\n        this.renderer.setElementClass(this.elLabel, 'active', true);\r\n      }\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdbActive]'\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n{type: Renderer, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdbActive': [{ type: Input },],\n'onClick': [{ type: HostListener, args: ['focus', ['$event'], ] },],\n'onBlur': [{ type: HostListener, args: ['blur', ['$event'], ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}