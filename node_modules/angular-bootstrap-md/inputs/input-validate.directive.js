import { Directive, Input, ElementRef, Renderer, HostListener } from '@angular/core';
var InputValidateDirective = (function () {
    function InputValidateDirective(_elRef, _renderer) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this.value = '';
    }
    InputValidateDirective.prototype.ngOnInit = function () {
        // Inititalise a new <span> wrong/right elements and render it below the host component.
        this.wrongTextContainer = this._renderer.createElement(this._elRef.nativeElement.parentElement, 'span');
        this._renderer.setElementClass(this.wrongTextContainer, 'inputVal', true);
        this._renderer.setElementClass(this.wrongTextContainer, 'text-danger', true);
        this.wrongTextContainer.innerHTML = 'wrong';
        this._renderer.setElementStyle(this.wrongTextContainer, 'visibility', 'hidden');
        this.rightTextContainer = this._renderer.createElement(this._elRef.nativeElement.parentElement, 'span');
        this._renderer.setElementClass(this.rightTextContainer, 'inputVal', true);
        this._renderer.setElementClass(this.rightTextContainer, 'text-success', true);
        this.rightTextContainer.innerHTML = 'right';
        this._renderer.setElementStyle(this.rightTextContainer, 'visibility', 'hidden');
    };
    InputValidateDirective.prototype.onKeyUp = function () {
        var inputType = event.srcElement.attributes['type'].nodeValue;
        if (inputType === 'email') {
            if (this._elRef.nativeElement.value.length === 0) {
                this._renderer.setElementClass(this._elRef.nativeElement, 'counter-danger', false);
                this._renderer.setElementClass(this._elRef.nativeElement, 'counter-success', false);
            }
            else if (this._elRef.nativeElement.value.match(/^[a-zA-Z0-9]+@[a-zA-Z0-9]+$/g)) {
                this._renderer.setElementClass(this._elRef.nativeElement, 'counter-danger', false);
                this._renderer.setElementClass(this._elRef.nativeElement, 'counter-success', true);
            }
            else if (!this._elRef.nativeElement.value.match(/^[a-zA-Z0-9]+@[a-zA-Z0-9]+$/g)) {
                this._renderer.setElementClass(this._elRef.nativeElement, 'counter-success', false);
                this._renderer.setElementClass(this._elRef.nativeElement, 'counter-danger', true);
            }
        }
        else if (inputType === 'password') {
            if (this._elRef.nativeElement.value.match(/^[a-zA-Z0-9]+$/g)) {
                this._renderer.setElementClass(this._elRef.nativeElement, 'counter-success', true);
            }
            else if (this._elRef.nativeElement.value.length === 0) {
                this._renderer.setElementClass(this._elRef.nativeElement, 'counter-success', false);
            }
        }
    };
    return InputValidateDirective;
}());
export { InputValidateDirective };
InputValidateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[mdbInputValidate]',
            },] },
];
/** @nocollapse */
InputValidateDirective.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: Renderer, },
]; };
InputValidateDirective.propDecorators = {
    'value': [{ type: Input },],
    'onKeyUp': [{ type: HostListener, args: ['keyup', ['$event'],] },],
};
//# sourceMappingURL=input-validate.directive.js.map