{"version":3,"sources":["../../../../src/app/typescripts/free/dropdown/dropdown.state.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAA,EAAc,UAAA,EAAW,MAAO,eAAA,CAAgB;AAIzD;IAaG;QAAA,iBAIC;QAhBF,cAAS,GAAkB,MAAM,CAAC;QAElC,iBAAY,GAAG,IAAI,YAAY,EAAW,CAAC;QAC3C,qBAAgB,GAAG,IAAI,YAAY,EAAW,CAAC;QAC/C,gBAAW,GAAG,IAAI,YAAY,EAAW,CAAC;QASvC,IAAI,CAAC,YAAY,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO;YACtC,KAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAOJ,sBAAC;AAAD,CAxBA,AAwBC;;AANO,0BAAU,GAA0B;IAC5C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,8BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC","file":"dropdown.state.js","sourceRoot":"","sourcesContent":["import { EventEmitter, Injectable } from '@angular/core';\r\nimport { BsComponentRef } from '../utils/component-loader/bs-component-ref.class';\r\n\r\n\r\nexport class BsDropdownState {\r\n  direction: 'down' | 'up' = 'down';\r\n  autoClose: boolean;\r\n  isOpenChange = new EventEmitter<boolean>();\r\n  isDisabledChange = new EventEmitter<boolean>();\r\n  toggleClick = new EventEmitter<boolean>();\r\n\r\n  /**\r\n   * Content to be displayed as popover.\r\n   */\r\n   dropdownMenu: Promise<BsComponentRef<any>>;\r\n   resolveDropdownMenu: (componentRef: BsComponentRef<any>) => void;\r\n\r\n   constructor() {\r\n     this.dropdownMenu = new Promise((resolve) => {\r\n       this.resolveDropdownMenu = resolve;\r\n     });\r\n   }\r\n static decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}