{"version":3,"sources":["../../../../src/app/typescripts/free/tooltip/tooltip.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAiB,SAAA,EAAW,uBAAA,EAAiC,WAAA,EAAY,MAAQ,eAAA,CAAgB;AACxG,OAAO,EAAE,aAAA,EAAc,MAAO,mBAAA,CAAoB;AAClD,OAAO,EAAE,KAAA,EAAM,MAAO,+BAAA,CAAgC;AAGtD;IAYE,mCAAmB,MAAqB;QAN/B,SAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QAO1B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC9B,CAAC;IAND,sBAAW,4CAAK;aAAhB;YACE,MAAM,CAAC,KAAK,EAAE,CAAC;QACjB,CAAC;;;OAAA;IAMM,mDAAe,GAAtB;QACE,IAAI,CAAC,QAAQ,GAAG,EAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;QACrC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;QAElD,IAAI,CAAC,QAAQ,CAAC,EAAE,GAAG,IAAI,CAAC;QACxB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;QAC5B,CAAC;QAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;QACxC,CAAC;IACH,CAAC;IAsBH,gCAAC;AAAD,CAnDA,AAmDC;;AArBM,oCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,uBAAuB;gBACjC,eAAe,EAAE,uBAAuB,CAAC,MAAM;gBAC/C,2BAA2B;gBAC3B,IAAI,EAAE;oBACJ,SAAS,EAAE,kDAAkD;iBAC9D;gBACD,QAAQ,EAAE,6GAGT;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,wCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,aAAa,GAAG;CACtB,EAF6F,CAE7F,CAAC;AACK,wCAAc,GAA2C;IAChE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,YAAY,EAAG,EAAE,EAAE;CACvD,CAAC","file":"tooltip.component.js","sourceRoot":"","sourcesContent":["import { AfterViewInit, Component, ChangeDetectionStrategy, Inject, HostBinding  } from '@angular/core';\r\nimport { TooltipConfig } from './tooltip.service';\r\nimport { isBs3 } from '../utils/ng2-bootstrap-config';\r\n\r\n\r\nexport class TooltipContainerComponent implements AfterViewInit {\r\n  public classMap: any;\r\n  public placement: string;\r\n  public popupClass: string;\r\n  public animation: boolean;\r\n\r\n   private show = !this.isBs3;\r\n\r\n  public get isBs3(): boolean {\r\n    return isBs3();\r\n  }\r\n\r\n  public constructor(config: TooltipConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  public ngAfterViewInit(): void {\r\n    this.classMap = {in: false, fade: false};\r\n    this.classMap[this.placement] = true;\r\n    this.classMap['tooltip-' + this.placement] = true;\r\n\r\n    this.classMap.in = true;\r\n    if (this.animation) {\r\n      this.classMap.fade = true;\r\n    }\r\n\r\n    if (this.popupClass) {\r\n      this.classMap[this.popupClass] = true;\r\n    }\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\r\n  selector: 'mdb-tooltip-container',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // tslint:disable-next-line\r\n  host: {\r\n    '[class]': '\"tooltip-fadeIn tooltip in tooltip-\" + placement'\r\n  },\r\n  template: `\r\n  <div class=\"tooltip-arrow\"></div>\r\n  <div class=\"tooltip-inner\"><ng-content></ng-content></div>\r\n  `\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: TooltipConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'show': [{ type: HostBinding, args: ['class.show', ] },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}