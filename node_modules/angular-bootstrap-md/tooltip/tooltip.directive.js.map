{"version":3,"sources":["../../../../src/app/typescripts/free/tooltip/tooltip.directive.ts"],"names":[],"mappings":"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","file":"tooltip.directive.js","sourceRoot":"","sourcesContent":["import {\r\n  Directive, Input, TemplateRef, ViewContainerRef, Output, EventEmitter,\r\n  Renderer, ElementRef, OnInit, OnDestroy\r\n} from '@angular/core';\r\nimport { TooltipContainerComponent } from './tooltip.component';\r\nimport { TooltipConfig } from './tooltip.service';\r\nimport { ComponentLoaderFactory, ComponentLoader } from '../utils/component-loader';\r\nimport { OnChange } from '../utils/decorators';\r\n\r\n\r\nexport class TooltipDirective implements OnInit, OnDestroy {\r\n  /**\r\n   * Content to be displayed as tooltip.\r\n   */\r\n   @OnChange()\r\n    public mdbTooltip: string | TemplateRef<any>;\r\n   /** Fired when tooltip content changes */\r\n    public tooltipChange: EventEmitter<string | TemplateRef<any>> = new EventEmitter();\r\n\r\n  /**\r\n   * Placement of a tooltip. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n   */\r\n    public placement: string;\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of\r\n   * event names.\r\n   */\r\n    public triggers: string;\r\n  /**\r\n   * A selector specifying the element the tooltip should be appended to.\r\n   * Currently only supports \"body\".\r\n   */\r\n    public container: string;\r\n\r\n  /**\r\n   * Returns whether or not the tooltip is currently being shown\r\n   */\r\n   \r\n   public get isOpen(): boolean { return this._tooltip.isShown; }\r\n\r\n   public set isOpen(value: boolean) {\r\n     if (value) {this.show(); } else {this.hide(); }\r\n   }\r\n\r\n  /**\r\n   * Allows to disable tooltip\r\n   */\r\n    public isDisabled: boolean;\r\n\r\n  /**\r\n   * Emits an event when the tooltip is shown\r\n   */\r\n    public onShown: EventEmitter<any>;\r\n  /**\r\n   * Emits an event when the tooltip is hidden\r\n   */\r\n    public onHidden: EventEmitter<any>;\r\n\r\n    public delay = 0;\r\n\r\n    public fadeDuration = 150;\r\n\r\n   protected _delayTimeoutId: any;\r\n\r\n   private _tooltip: ComponentLoader<TooltipContainerComponent>;\r\n\r\n   public constructor(_viewContainerRef: ViewContainerRef,\r\n     _renderer: Renderer,\r\n     _elementRef: ElementRef,\r\n     cis: ComponentLoaderFactory,\r\n     config: TooltipConfig) {\r\n     this._tooltip = cis\r\n     .createLoader<TooltipContainerComponent>(_elementRef, _viewContainerRef, _renderer)\r\n     .provide({provide: TooltipConfig, useValue: config});\r\n\r\n     Object.assign(this, config);\r\n     this.onShown = this._tooltip.onShown;\r\n     this.onHidden = this._tooltip.onHidden;\r\n   }\r\n\r\n   public ngOnInit(): void {\r\n     this._tooltip.listen({\r\n       triggers: this.triggers,\r\n       show: () => this.show()\r\n     });\r\n     this.tooltipChange.subscribe((value: any) => {\r\n       if (!value) {\r\n         this._tooltip.hide();\r\n       }\r\n     });\r\n   }\r\n\r\n  /**\r\n   * Toggles an element’s tooltip. This is considered a “manual” triggering of\r\n   * the tooltip.\r\n   */\r\n   public toggle(): void {\r\n     if (this.isOpen) {\r\n       return this.hide();\r\n     }\r\n\r\n     this.show();\r\n   }\r\n\r\n  /**\r\n   * Opens an element’s tooltip. This is considered a “manual” triggering of\r\n   * the tooltip.\r\n   */\r\n   public show(): void {\r\n     if (this.isOpen || this.isDisabled || this._delayTimeoutId || !this.mdbTooltip) {\r\n       return;\r\n     }\r\n\r\n     const showTooltip = () => this._tooltip\r\n     .attach(TooltipContainerComponent)\r\n     .to(this.container)\r\n     .position({attachment: this.placement})\r\n     .show({\r\n       content: this.mdbTooltip,\r\n       placement: this.placement\r\n     });\r\n\r\n     if (this.delay) {\r\n       this._delayTimeoutId = setTimeout(() => { showTooltip(); }, this.delay);\r\n     } else {\r\n       showTooltip();\r\n     }\r\n   }\r\n\r\n  /**\r\n   * Closes an element’s tooltip. This is considered a “manual” triggering of\r\n   * the tooltip.\r\n   */\r\n   public hide(): void {\r\n     if (this._delayTimeoutId) {\r\n       clearTimeout(this._delayTimeoutId);\r\n       this._delayTimeoutId = undefined;\r\n     }\r\n\r\n     if (!this._tooltip.isShown) {\r\n       return;\r\n     }\r\n\r\n     this._tooltip.instance.classMap.in = false;\r\n     setTimeout(() => {\r\n       this._tooltip.hide();\r\n     }, this.fadeDuration);\r\n   }\r\n\r\n   public dispose() {\r\n     this._tooltip.dispose();\r\n   }\r\n\r\n   public ngOnDestroy(): void {\r\n     this._tooltip.dispose();\r\n   }\r\n static decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdbTooltip]',\r\n  exportAs: 'mdb-tooltip'\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: Renderer, },\n{type: ElementRef, },\n{type: ComponentLoaderFactory, },\n{type: TooltipConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'mdbTooltip': [{ type: Input },],\n'tooltipChange': [{ type: Output },],\n'placement': [{ type: Input },],\n'triggers': [{ type: Input },],\n'container': [{ type: Input },],\n'isOpen': [{ type: Input },],\n'isDisabled': [{ type: Input },],\n'onShown': [{ type: Output },],\n'onHidden': [{ type: Output },],\n'delay': [{ type: Input },],\n'fadeDuration': [{ type: Input },],\n};\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}