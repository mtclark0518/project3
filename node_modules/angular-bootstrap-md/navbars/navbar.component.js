import { Component, ViewChild, Input, Renderer, HostListener } from '@angular/core';
var NavbarComponent = (function () {
    function NavbarComponent(renderer) {
        this.renderer = renderer;
        this.containerInside = true;
        this.shown = false;
        this.duration = 350; // ms
        this.collapse = false;
        this.showClass = false;
        this.collapsing = false;
    }
    NavbarComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        /* bugfix - bez tego sypie ExpressionChangedAfterItHasBeenCheckedError -
        https://github.com/angular/angular/issues/6005#issuecomment-165951692 */
        setTimeout(function () {
            _this.height = _this.el.nativeElement.scrollHeight;
            _this.collapse = true;
            if (!_this.containerInside) {
                var childrens = Array.from(_this.container.nativeElement.children);
                childrens.forEach(function (child) {
                    _this.navbar.nativeElement.append(child);
                    _this.container.nativeElement.remove();
                });
            }
            if (_this.el.nativeElement.children.length === 0) {
                _this.el.nativeElement.remove();
            }
        });
    };
    NavbarComponent.prototype.toggle = function (event) {
        event.preventDefault();
        if (!this.collapsing) {
            if (this.shown) {
                this.hide();
            }
            else {
                this.show();
            }
        }
    };
    NavbarComponent.prototype.show = function () {
        var _this = this;
        this.shown = true;
        this.collapse = false;
        this.collapsing = true;
        setTimeout(function () {
            _this.renderer.setElementStyle(_this.el.nativeElement, 'height', _this.height + 'px');
        }, 10);
        setTimeout(function () {
            _this.collapsing = false;
            _this.collapse = true;
            _this.showClass = true;
        }, this.duration);
    };
    NavbarComponent.prototype.hide = function () {
        var _this = this;
        this.shown = false;
        this.collapse = false;
        this.showClass = false;
        this.collapsing = true;
        setTimeout(function () {
            _this.renderer.setElementStyle(_this.el.nativeElement, 'height', '0px');
        }, 10);
        setTimeout(function () {
            _this.collapsing = false;
            _this.collapse = true;
        }, this.duration);
    };
    Object.defineProperty(NavbarComponent.prototype, "displayStyle", {
        get: function () {
            // if(!this.containerInside) {
            //  return 'flex';
            // } else {
            return '';
            // }
        },
        enumerable: true,
        configurable: true
    });
    NavbarComponent.prototype.onResize = function (event) {
        var _this = this;
        var breakpoit = 0;
        if (this.SideClass.includes('navbar-expand-xl')) {
            breakpoit = 1200;
        }
        else if (this.SideClass.includes('navbar-expand-lg')) {
            breakpoit = 992;
        }
        else if (this.SideClass.includes('navbar-expand-md')) {
            breakpoit = 768;
        }
        else if (this.SideClass.includes('navbar-expand-sm')) {
            breakpoit = 576;
        }
        else {
            breakpoit = event.target.innerWidth + 1;
        }
        // console.log(breakpoit);
        if (event.target.innerWidth < breakpoit) {
            if (!this.shown) {
                this.collapse = false;
                this.renderer.setElementStyle(this.el.nativeElement, 'height', '0px');
                this.renderer.setElementStyle(this.el.nativeElement, 'opacity', '0');
                setTimeout(function () {
                    _this.height = _this.el.nativeElement.scrollHeight;
                    _this.collapse = true;
                    _this.renderer.setElementStyle(_this.el.nativeElement, 'opacity', '');
                }, 4);
            }
        }
        else {
            this.collapsing = false;
            this.shown = false;
            this.showClass = false;
            this.collapse = true;
            this.renderer.setElementStyle(this.el.nativeElement, 'height', '');
        }
    };
    NavbarComponent.prototype.onScroll = function (event) {
        if (this.navbar.nativeElement.classList.contains('scrolling-navbar')) {
            if (window.pageYOffset > 120) {
                this.renderer.setElementClass(this.navbar.nativeElement, 'top-nav-collapse', true);
            }
            else {
                this.renderer.setElementClass(this.navbar.nativeElement, 'top-nav-collapse', false);
            }
        }
    };
    return NavbarComponent;
}());
export { NavbarComponent };
NavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'mdb-navbar',
                template: "\n  <nav class=\"{{SideClass}}\" #nav>\n  <ng-content></ng-content>\n  <div [ngClass]=\"{'container': containerInside}\" [ngStyle]=\"{'display': displayStyle}\" #container>\n    <ng-content select=\"logo\"></ng-content>\n    <button class=\"navbar-toggler\" type=\"button\" \n    (click)=\"toggle($event)\" mdbRippleRadius\n    *ngIf=\"this.el.nativeElement.children.length !== 0\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div #navbar [style.height]=\"height\" class=\"navbar-collapse collapse\" \n    [ngClass]=\"{'collapse': collapse, 'show': showClass, 'collapsing': collapsing}\">\n      <ng-content select=\"links\" ></ng-content>\n    </div>\n  </div>\n</nav>\n\n  "
            },] },
];
/** @nocollapse */
NavbarComponent.ctorParameters = function () { return [
    { type: Renderer, },
]; };
NavbarComponent.propDecorators = {
    'SideClass': [{ type: Input },],
    'containerInside': [{ type: Input },],
    'el': [{ type: ViewChild, args: ['navbar',] },],
    'mobile': [{ type: ViewChild, args: ['mobile',] },],
    'navbar': [{ type: ViewChild, args: ['nav',] },],
    'container': [{ type: ViewChild, args: ['container',] },],
    'onResize': [{ type: HostListener, args: ['window:resize', ['$event'],] },],
    'onScroll': [{ type: HostListener, args: ['document:scroll', ['$event'],] },],
};
//# sourceMappingURL=navbar.component.js.map