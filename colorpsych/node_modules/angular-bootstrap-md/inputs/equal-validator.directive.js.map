{"version":3,"sources":["../../../../src/app/typescripts/free/inputs/equal-validator.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,UAAA,EAAY,SAAA,EAAU,MAAO,eAAA,CAAgB;AACjE,OAAO,EAA8B,aAAA,EAAc,MAAO,gBAAA,CAAiB;AAI3E;IACE,iCAAqB,aAAqB,EAChC,OAAe;QADJ,kBAAa,GAAb,aAAa,CAAQ;QAChC,YAAO,GAAP,OAAO,CAAQ;IAEzB,CAAC;IAED,sBAAY,8CAAS;aAArB;YACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,OAAO,KAAK,MAAM,GAAG,IAAI,GAAG,KAAK,CAAC;QAChD,CAAC;;;OAAA;IAED,0CAAQ,GAAR,UAAS,CAAkB;QACzB,oCAAoC;QACpC,IAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;QAElB,gCAAgC;QAChC,IAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAEzC,kBAAkB;QAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC;QAClC,CAAC;QAED,0BAA0B;QAC1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACzC,OAAO,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;YACjC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAClC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACpB,CAAC;QACH,CAAC;QAED,8BAA8B;QAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACzC,CAAC,CAAC,SAAS,CAAC;gBACV,aAAa,EAAE,KAAK;aACrB,CAAC,CAAC;QACL,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAcH,8BAAC;AAAD,CAvDA,AAuDC;;AAbM,kCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,4FAA4F;gBACtG,SAAS,EAAE;oBACX,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,UAAU,CAAC,cAAM,OAAA,uBAAuB,EAAvB,CAAuB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE;iBAC9F;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,sCAAc,GAAmE,cAAM,OAAA;IAC9F,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,eAAe,EAAG,EAAE,EAAG,EAAC;IACjF,EAAC,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,SAAS,EAAG,EAAE,EAAG,EAAC;CAC1E,EAH6F,CAG7F,CAAC","file":"equal-validator.directive.js","sourceRoot":"","sourcesContent":["import { Directive, forwardRef, Attribute } from '@angular/core';\r\nimport { Validator, AbstractControl, NG_VALIDATORS } from '@angular/forms';\r\n\r\n\r\n\r\nexport class EqualValidatorDirective implements Validator {\r\n  constructor(  public validateEqual: string,\r\n     public reverse: string) {\r\n\r\n  }\r\n\r\n  private get isReverse() {\r\n    if (!this.reverse) {\r\n      return false;\r\n    }\r\n    return this.reverse === 'true' ? true : false;\r\n  }\r\n\r\n  validate(c: AbstractControl): { [key: string]: any } {\r\n    // self value (e.g. retype password)\r\n    const v = c.value;\r\n\r\n    // control value (e.g. password)\r\n    const e = c.root.get(this.validateEqual);\r\n\r\n    // value not equal\r\n    if (e && v !== e.value) {\r\n      return { validateEqual: false };\r\n    }\r\n\r\n    // value equal and reverse\r\n    if (e && v === e.value && this.isReverse) {\r\n      delete e.errors['validateEqual'];\r\n      if (!Object.keys(e.errors).length) {\r\n        e.setErrors(null);\r\n      }\r\n    }\r\n\r\n    // value not equal and reverse\r\n    if (e && v !== e.value && this.isReverse) {\r\n      e.setErrors({\r\n        validateEqual: false\r\n      });\r\n    }\r\n\r\n    return null;\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\r\n  selector: '[mdb-validateEqual][formControlName],[validateEqual][formControl],[validateEqual][ngModel]',\r\n  providers: [\r\n  { provide: NG_VALIDATORS, useExisting: forwardRef(() => EqualValidatorDirective), multi: true }\r\n  ]\r\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Attribute, args: ['validateEqual', ] }, ]},\n{type: undefined, decorators: [{ type: Attribute, args: ['reverse', ] }, ]},\n];\n}\r\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}